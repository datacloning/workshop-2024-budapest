[{"name":"server.R","content":"server <- function(input, output) {\n    output$distPlot <- renderPlot({\n        par(las = 1)\n        set.seed(input$seed)\n        if (input$distr == \"Uniform\" && input$b < input$a)\n            stop(\"Maximum must be greater than Minimum\")\n        y <- switch(input$distr,\n            \"Bernoulli\" = rbinom(1000, 1, input$p_bern),\n            \"Binomial\" = rbinom(1000, input$size, input$p_binom),\n            \"Poisson\" = rpois(1000, input$lambda),\n            \"Normal\" = rnorm(1000, input$mu, sqrt(input$var)),\n            \"Lognormal\" = rlnorm(1000, input$mux, sqrt(input$varx)),\n            \"Uniform\" = runif(1000, input$a, input$b),\n            \"Beta\" = rbeta(1000, input$shape1, input$shape2),\n            \"Gamma\" = rgamma(1000, input$shape, input$rate))\n        yy <- y[1:input$n]\n        x <- switch(input$distr,\n            \"Bernoulli\" = c(0,1),\n            \"Binomial\" = seq(0, max(yy)+1, by = 1),\n            \"Poisson\" = seq(0, max(yy)+1, by = 1),\n            \"Normal\" = seq(min(yy)-1, max(yy)+1, length.out = 1000),\n            \"Lognormal\" = seq(0.0001, max(yy)+1, length.out = 1000),\n            \"Uniform\" = seq(input$a+0.0001, input$b-0.0001, length.out = 1000),\n            \"Beta\" = seq(0.0001, 0.9999, length.out = 1000),\n            \"Gamma\" = seq(0.0001, max(yy), length.out = 1000))\n        d <- switch(input$distr,\n            \"Bernoulli\" = dbinom(x, 1, input$p_bern),\n            \"Binomial\" = dbinom(x, input$size, input$p_binom),\n            \"Poisson\" = dpois(x, input$lambda),\n            \"Normal\" = dnorm(x, input$mu, sqrt(input$var)),\n            \"Lognormal\" = dlnorm(x, input$mux, sqrt(input$varx)),\n            \"Uniform\" = dunif(x, input$a, input$b),\n            \"Beta\" = dbeta(x, input$shape1, input$shape2),\n            \"Gamma\" = dgamma(x, input$shape, input$rate))\n        xlab <- \"x\"\n        ylab <- \"Density\"\n        main <- paste0(input$distr, \" distribution (n = \", input$n, \")\")\n        if (input$distr %in% c(\"Bernoulli\", \"Binomial\", \"Poisson\")) {\n            tmp <- table(yy) / input$n\n            plot(tmp, ylim=c(0, max(tmp, d)),\n                ylab = ylab, xlab = xlab, main = main,\n                col = \"#cccccc\", lwd = 10)\n            points(x, d, pch = 21, col = \"#c7254e\", type = \"b\",\n                lty = 2, cex = 2)\n        } else {\n            tmp <- hist(yy, plot = FALSE)\n            hist(yy, freq = FALSE, ylim=c(0, max(tmp$density, d)),\n                ylab = ylab, xlab = xlab, main = main,\n                col = \"#ecf0f1\", border = \"#cccccc\")\n            lines(x, d, lwd = 2, col = \"#c7254e\")\n        }\n    })\n\n    output$mlePlot <- renderPlot({\n        par(las = 1)\n        set.seed(input$seed_mle)\n        y <- rbinom(n = 1000, size = 1, p = input$p_mle)\n        pt <- seq(0, 1, by = 0.0005)\n        L <- sapply(pt, function(z)\n            prod(dbinom(y[1:input$n_mle], size = 1, prob = z)))\n        plot(pt, L, type = \"l\", col=\"#3498db\",\n            ylab = \"Likelihood\", xlab=\"p\",\n            sub=paste0(\"Mean = \", round(mean(y[1:input$n_mle]), 2), \" (\",\n                sum(1-y[1:input$n_mle]), \" 0s & \", sum(y[1:input$n_mle]), \" 1s)\"),\n            main = paste(\"Estimate =\", round(pt[which.max(L)], 2)))\n        abline(v = input$p_mle, lwd = 2, col = \"#c7254e\")\n        abline(v = pt[which.max(L)], lwd = 2, col = \"#18bc9c\")\n    })\n\n    output$betaPlot <- renderPlot({\n        par(las = 1)\n        set.seed(input$seed_beta)\n        y <- rbinom(n = 1000, size = 1, p = input$p_beta)\n        BY <- 0.0005\n        pval <- seq(0.001, 0.999, by = BY)\n        fLik <- function(p, y)\n            prod(dbinom(y, size = 1, prob = p))\n        Lik <- sapply(pval, fLik, y=y[1:input$n_beta])\n        fPri <- function(p, shape1=0.5, shape2=0.5)\n            dbeta(p, shape1, shape2)\n        Pri <- sapply(pval, fPri, input$a_beta, input$b_beta)\n        if (input$scale_beta == \"prob\") {\n            p <- input$p_beta\n        } else {\n            p <- qlogis(input$p_beta)\n            br <- c(0.001, seq(0.001+BY/2, 0.999-BY/2, by = BY), 0.999)\n            dx <- diff(pval)\n            dx <- c(dx[1], dx)\n            d <- Pri * dx / diff(qlogis(br))\n            Pri <- smooth.spline(pval, d)$y\n            pval <- qlogis(pval)\n        }\n        Pos <- Lik * Pri\n        M <- cbind(Pri=Pri/max(Pri),\n            Lik=Lik/max(Lik),\n            Pos=Pos/max(Pos))\n        Col <- c(\"#cccccc\", \"#3498db\", \"#f39c12\")\n        matplot(pval, M, type = \"l\",\n            col=Col, lwd=2, lty=1,\n            ylab = \"Density\",\n            xlab=ifelse(input$scale_beta == \"logit\", \"logit(p)\",\"p\"),\n            sub=paste0(\"Mean = \", round(mean(y[1:input$n_beta]), 2), \" (\",\n                sum(1-y[1:input$n_beta]), \" 0s & \", sum(y[1:input$n_beta]), \" 1s)\"),\n            main = paste0(\"True value = \", round(p, 2),\n                \", Posterior mode = \", round(pval[which.max(Pos)], 2)))\n        abline(v = p, lwd = 2, col = \"#c7254e\")\n        abline(v = pval[which.max(Pos)], lwd = 2, col = \"#18bc9c\")\n        legend(\"topleft\",lty=1, lwd=2, col=Col, bty=\"n\",\n            legend=c(\"Prior\",\"Likelihood\",\"Posterior\"))\n    })\n\n    output$normPlot <- renderPlot({\n        par(las = 1)\n        set.seed(input$seed_norm)\n        y <- rbinom(n = 1000, size = 1, p = input$p_norm)\n        pval <- seq(0.001, 0.999, by = 0.0005)\n        fLik <- function(p, y)\n            prod(dbinom(y, size = 1, prob = p))\n        fPri <- function(p, mu, sig2, scale) {\n            if (scale == \"prob\")\n                out <- (1/(p*(1-p))) * dnorm(qlogis(p), mu, sqrt(sig2))\n            if (scale == \"logit\")\n                out <- dnorm(qlogis(p), mu, sqrt(sig2))\n            out\n        }\n        Lik <- sapply(pval, fLik, y=y[1:input$n_norm])\n        Pri <- sapply(pval, fPri, input$mu_norm, input$sig2_norm, input$scale_norm)\n        Pos <- Lik * Pri\n        M <- cbind(Pri=Pri/max(Pri),\n            Lik=Lik/max(Lik),\n            Pos=Pos/max(Pos))\n        if (input$scale_norm == \"logit\") {\n            p <- qlogis(input$p_norm)\n            pval <- qlogis(pval)\n        } else {\n            p <- input$p_norm\n        }\n        Col <- c(\"#cccccc\", \"#3498db\", \"#f39c12\")\n        matplot(pval, M, type = \"l\",\n            col=Col, lwd=2, lty=1,\n            ylab = \"Density\",\n            xlab=ifelse(input$scale_norm == \"logit\", \"logit(p)\",\"p\"),\n            sub=paste0(\"Mean = \", round(mean(y[1:input$n_norm]), 2), \" (\",\n                sum(1-y[1:input$n_norm]), \" 0s & \", sum(y[1:input$n_norm]), \" 1s)\"),\n            main = paste0(\"True value = \", round(p, 2),\n                \", Posterior mode = \", round(pval[which.max(Pos)], 2)))\n        abline(v = p, lwd = 2, col = \"#c7254e\")\n        abline(v = pval[which.max(Pos)], lwd = 2, col = \"#18bc9c\")\n        legend(\"topleft\",lty=1, lwd=2, col=Col, bty=\"n\",\n               legend=c(\"Prior\",\"Likelihood\",\"Posterior\"))\n    })\n\n    output$bimodPlot <- renderPlot({\n        par(las = 1)\n        set.seed(input$seed_bimod)\n        y <- rbinom(n = 1000, size = 1, p = input$p_bimod)\n        BY <- 0.0005\n        pval <- seq(0.001, 0.999, by = BY)\n        fLik <- function(p, y)\n            prod(dbinom(y, size = 1, prob = p))\n        Lik <- sapply(pval, fLik, y=y[1:input$n_bimod])\n\n        fPri <- function(p, mu_1, sig2_1, mu_2, sig2_2)\n            0.5 * (dnorm(qlogis(p), mu_1, sqrt(sig2_1)) +\n                dnorm(qlogis(p), mu_2, sqrt(sig2_2)))\n        Pri <- sapply(pval, fPri, input$mu_1_bimod, input$sig2_1_bimod,\n            input$mu_2_bimod, input$sig2_2_bimod)\n        if (input$scale_bimod == \"prob\") {\n            p <- input$p_bimod\n            br <- qlogis(c(0.001, seq(0.001+BY/2, 0.999-BY/2, by = BY), 0.999))\n            dx <- diff(qlogis(pval))\n            dx <- c(dx[1], dx)\n            d <- Pri * dx / diff(plogis(br))\n            Pri <- smooth.spline(pval, d)$y\n        } else {\n            pval <- qlogis(pval)\n            p <- qlogis(input$p_bimod)\n        }\n\n        Pos <- Lik * Pri\n        M <- cbind(Pri=Pri/max(Pri),\n            Lik=Lik/max(Lik),\n            Pos=Pos/max(Pos))\n        Col <- c(\"#cccccc\", \"#3498db\", \"#f39c12\")\n        matplot(pval, M, type = \"l\",\n            col=Col, lwd=2, lty=1,\n            ylab = \"Density\",\n            xlab=ifelse(input$scale_bimod == \"logit\", \"logit(p)\",\"p\"),\n            sub=paste0(\"Mean = \", round(mean(y[1:input$n_bimod]), 2), \" (\",\n                sum(1-y[1:input$n_bimod]), \" 0s & \", sum(y[1:input$n_bimod]), \" 1s)\"),\n            main = paste0(\"True value = \", round(p, 2),\n                \", Posterior mode = \", round(pval[which.max(Pos)], 2)))\n        abline(v = p, lwd = 2, col = \"#c7254e\")\n        abline(v = pval[which.max(Pos)], lwd = 2, col = \"#18bc9c\")\n        legend(\"topleft\",lty=1, lwd=2, col=Col, bty=\"n\",\n               legend=c(\"Prior\",\"Likelihood\",\"Posterior\"))\n    })\n\n    output$dcPlot <- renderPlot({\n        par(las = 1)\n        set.seed(input$seed_dc)\n        y <- rbinom(n = input$n_dc, size = 1, p = input$p_dc)\n        yk <- rep(y, input$K_dc)\n        BY <- 0.0005\n        pval <- seq(0.001, 0.999, by = BY)\n        fLik <- function(p, y)\n            sum(dbinom(y, size = 1, prob = p, log=TRUE))\n        Lik <- exp(sapply(pval, fLik, y=yk))\n        if (all(Lik <= 0)) {\n            est <- optimize(fLik, c(0.001, 0.999), y=yk, maximum=TRUE)$maximum\n            Lik[which.min(abs(pval - est))] <- 1\n        }\n        if (input$scale_dc == \"prob\") {\n            p <- input$p_dc\n            fPri <- function(p, shape1=0.5, shape2=0.5)\n                dbeta(p, shape1, shape2)\n            Pri <- sapply(pval, fPri, input$a_dc, input$b_dc)\n        } else {\n            p <- qlogis(input$p_dc)\n            N <- 10^5\n            x <- rbeta(N, input$a_dc, input$b_dc)\n            br <- c(0.001, seq(0.001+BY/2, 0.999-BY/2, by = BY), 0.999)\n            d <- as.numeric(table(cut(x, breaks=br))) / N\n            pval <- qlogis(pval)\n            g <- diff(qlogis(br))\n            gy <-  d / g\n            Pri <- smooth.spline(pval, gy)$y\n        }\n        Pos <- Lik * Pri\n        M <- cbind(Pri=Pri/max(Pri),\n            Lik=Lik/max(Lik),\n            Pos=Pos/max(Pos))\n        Col <- c(\"#cccccc\", \"#3498db\", \"#f39c12\")\n        matplot(pval, M, type = \"l\",\n            col=Col, lwd=2, lty=1,\n            ylab = \"Density\", xlab=\"p\",\n            sub=paste0(\"Mean = \", round(mean(y[1:input$n_dc]), 2), \" (\",\n                sum(1-y[1:input$n_dc]), \" 0s & \", sum(y[1:input$n_dc]), \" 1s)\"),\n            main = paste0(\"True value = \", round(p, 2),\n                \", Posterior mode = \", round(pval[which.max(Pos)], 2)))\n        abline(v = p, lwd = 2, col = \"#c7254e\")\n        abline(v = pval[which.max(Pos)], lwd = 2, col = \"#18bc9c\")\n        legend(\"topleft\",lty=1, lwd=2, col=Col, bty=\"n\",\n               legend=c(\"Prior\",\"Likelihood\",\"Posterior\"))\n    })\n\n}\n","type":"text"},{"name":"ui.R","content":"ui <- dashboardPage(\n  dashboardHeader(title = \"Data Cloning Apps\"),\n  dashboardSidebar(\n    sidebarMenu(\n      menuItem(\"Distributions\", tabName = \"distributions\"),\n      menuItem(\"MLE\", tabName = \"mle\"),\n      menuItem(\"Beta prior\", tabName = \"betaprior\"),\n      menuItem(\"Normal prior\", tabName = \"normalprior\"),\n      menuItem(\"Bimodal prior\", tabName = \"bimodalprior\"),\n      menuItem(\"Data cloning\", tabName = \"datacloning\")\n    )\n  ),\n  dashboardBody(\n    tabItems(\n      tabItem(tabName = \"distributions\",\n        fluidRow(\n          box(title=\"Histogram\",\n            plotOutput(\"distPlot\")\n          ),\n          box(title=\"Inputs\",\n            selectInput(\"distr\", \"Distribution\",\n                  choices=c(Bernoulli = \"Bernoulli\",\n                Binomial = \"Binomial\",\n                Poisson = \"Poisson\",\n                Normal = \"Normal\",\n                Lognormal = \"Lognormal\",\n                Uniform = \"Uniform\",\n                Beta = \"Beta\",\n                Gamma = \"Gamma\")),\n            hr(),\n              sliderInput(\"n\", label = \"Sample size\",\n                          min = 10, max = 1000, value = 100, step = 1),\n              sliderInput(\"seed\", label = \"Random seed\",\n                          min = 0, max = 100, value = 0, step = 1),\n              ## Bernoulli\n              conditionalPanel(\n                condition = \"input.distr == 'Bernoulli'\",\n                  sliderInput(\"p_bern\", label = \"Probability\",\n                          min = 0, max = 1, value = 0.3, step = 0.05)),\n              ## Binomial\n              conditionalPanel(\n                condition = \"input.distr == 'Binomial'\",\n                  sliderInput(\"p_binom\", label = \"Probability\",\n                          min = 0, max = 1, value = 0.3, step = 0.05),\n                  sliderInput(\"size\", label = \"Size\",\n                          min = 1, max = 1000, value = 10, step = 1)),\n              ## Poisson\n              conditionalPanel(\n                condition = \"input.distr == 'Poisson'\",\n                  sliderInput(\"lambda\", label = \"Mean/Rate\",\n                          min = 0, max = 100, value = 5, step = 1)),\n              ## Normal\n              conditionalPanel(\n                condition = \"input.distr == 'Normal'\",\n                  sliderInput(\"mu\", label = \"Mean\",\n                          min = -10, max = 10, value = 0, step = 0.1),\n                  sliderInput(\"var\", label = \"Variance\",\n                          min = 0.001, max = 10, value = 1, step = 0.1)),\n              ## Logormal\n              conditionalPanel(\n                condition = \"input.distr == 'Lognormal'\",\n                  sliderInput(\"mux\", label = \"Mean\",\n                          min = -10, max = 10, value = -1, step = 0.1),\n                  sliderInput(\"varx\", label = \"Variance\",\n                          min = 0.001, max = 10, value = 1, step = 0.1)),\n              ## Uniform\n              conditionalPanel(\n                condition = \"input.distr == 'Uniform'\",\n                  sliderInput(\"a\", label = \"Minimum\",\n                          min = -10, max = 10, value = -1, step = 0.1),\n                  sliderInput(\"b\", label = \"Maximum\",\n                          min = -10, max = 10, value = 1, step = 0.1)),\n              ## Beta\n              conditionalPanel(\n                condition = \"input.distr == 'Beta'\",\n                  sliderInput(\"shape1\", label = \"Shape 2\",\n                          min = 0, max = 10, value = 1, step = 0.1),\n                  sliderInput(\"shape2\", label = \"Shape 1\",\n                          min = 0, max = 10, value = 1, step = 0.1)),\n              ## Gamma\n              conditionalPanel(\n                condition = \"input.distr == 'Gamma'\",\n                  sliderInput(\"shape\", label = \"Shape\",\n                          min = 0.001, max = 10, value = 1, step = 0.1),\n                  sliderInput(\"rate\", label = \"Rate\",\n                          min = 0.001, max = 10, value = 1, step = 0.1))\n            )\n          )\n        ),\n      tabItem(tabName = \"mle\",\n        fluidRow(\n            box(title=\"Density\",\n                plotOutput(\"mlePlot\")),\n            box(title=\"Inputs\",\n                sliderInput(\"p_mle\", label = \"Probability (true)\",\n                    min = 0, max = 1, value = 0.3, step = 0.05),\n                sliderInput(\"n_mle\", label = \"Sample size\",\n                    min = 10, max = 1000, value = 10, step = 10),\n                sliderInput(\"seed_mle\", label = \"Random seed\",\n                    min = 0, max = 100, value = 0, step = 10)\n                )\n        )\n      ),\n      tabItem(tabName = \"betaprior\",\n        fluidRow(\n            box(title=\"Density\",\n                plotOutput(\"betaPlot\")),\n            box(title=\"Inputs\",\n              sliderInput(\"p_beta\", label = \"Probability (true)\",\n                          min = 0, max = 1, value = 0.3, step = 0.05),\n              sliderInput(\"n_beta\", label = \"Sample size\",\n                          min = 1, max = 1000, value = 10, step = 10),\n              sliderInput(\"a_beta\", label = \"Beta prior shape parameter a\",\n                          min = 0, max = 2, value = 1, step = 0.1),\n              sliderInput(\"b_beta\", label = \"Beta prior shape parameter b\",\n                          min = 0, max = 2, value = 1, step = 0.1),\n              radioButtons(\"scale_beta\", label=\"Scale\",\n                         c(\"Probability (0, 1)\" = \"prob\",\n                           \"Logit (-Inf, Inf)\" = \"logit\")),\n              sliderInput(\"seed_beta\", label = \"Random seed\",\n                          min = 0, max = 100, value = 0, step = 10)\n                )\n        )\n      ),\n      tabItem(tabName = \"normalprior\",\n        fluidRow(\n            box(title=\"Density\",\n                plotOutput(\"normPlot\")),\n            box(title=\"Inputs\",\n                sliderInput(\"p_norm\", label = \"Probability (true)\",\n                    min = 0, max = 1, value = 0.3, step = 0.05),\n                sliderInput(\"n_norm\", label = \"Sample size\",\n                    min = 1, max = 1000, value = 10, step = 10),\n                sliderInput(\"mu_norm\", label = \"Normal prior mean\",\n                    min = -10, max = 10, value = 0, step = 1),\n                sliderInput(\"sig2_norm\", label = \"Normal prior variance\",\n                    min = 0.001, max = 100, value = 1, step = 10),\n                radioButtons(\"scale_norm\", label=\"Scale\",\n                    c(\"Probability (0, 1)\" = \"prob\",\n               \"Logit (-Inf, Inf)\" = \"logit\")),\n                sliderInput(\"seed_norm\", label = \"Random seed\",\n                    min = 0, max = 100, value = 0, step = 10)\n                )\n        )\n      ),\n      tabItem(tabName = \"bimodalprior\",\n        fluidRow(\n            box(title=\"Density\",\n                plotOutput(\"bimodPlot\")),\n            box(title=\"Inputs\",\n                sliderInput(\"p_bimod\", label = \"Probability (true)\",\n                  min = 0, max = 1, value = 0.3, step = 0.05),\n                sliderInput(\"n_bimod\", label = \"Sample size\",\n                  min = 0, max = 1000, value = 10, step = 10),\n                sliderInput(\"mu_1_bimod\", label = \"Normal prior mean\",\n                  min = -10, max = 10, value = -2, step = 1),\n                sliderInput(\"sig2_1_bimod\", label = \"Normal prior variance\",\n                  min = 0.001, max = 10, value = 1, step = 1),\n                sliderInput(\"mu_2_bimod\", label = \"Normal prior mean\",\n                  min = -10, max = 10, value = 2, step = 1),\n                sliderInput(\"sig2_2_bimod\", label = \"Normal prior variance\",\n                  min = 0.001, max = 10, value = 2, step = 1),\n                radioButtons(\"scale_bimod\", label=\"Scale\",\n                 c(\"Probability (0, 1)\" = \"prob\",\n                   \"Logit (-Inf, Inf)\" = \"logit\"),\n                 selected = \"logit\"),\n                sliderInput(\"seed_bimod\", label = \"Random seed\",\n                  min = 0, max = 100, value = 0, step = 10)\n                )\n        )\n      ),\n      tabItem(tabName = \"datacloning\",\n        fluidRow(\n            box(title=\"Density\",\n                plotOutput(\"dcPlot\")),\n            box(title=\"Inputs\",\n                sliderInput(\"p_dc\", label = \"Probability (true)\",\n                  min = 0, max = 1, value = 0.3, step = 0.05),\n                sliderInput(\"n_dc\", label = \"Sample size\",\n                  min = 1, max = 50, value = 10, step = 5),\n                sliderInput(\"a_dc\", label = \"Beta prior shape parameter a\",\n                  min = 0, max = 2, value = 1, step = 0.1),\n                sliderInput(\"b_dc\", label = \"Beta prior shape parameter b\",\n                  min = 0, max = 2, value = 1, step = 0.1),\n                sliderInput(\"K_dc\", label = \"Number of clones\",\n                  min = 1, max = 100, value = 1, step = 10),\n                radioButtons(\"scale_dc\", label=\"Scale\",\n                 c(\"Probability (0, 1)\" = \"prob\",\n                   \"Logit (-Inf, Inf)\" = \"logit\")),\n                sliderInput(\"seed_dc\", label = \"Random seed\",\n                  min = 0, max = 100, value = 0, step = 10)\n                )\n        )\n      )\n    )\n  )\n)\n","type":"text"},{"name":"README.md","content":"# Shiny applikáció\n\nAz applikáció segítségével különféle statisztikai eloszlásokat próbálhatunk ki, vagy megismerkedhetünk a Bernoulli modellel mind frekventista, mind Bayes-i szempontból. Megtapasztalhatjuk a prior eloszlás hatását, és megláthatjuk hogyan működik az adat klónozás.\n\nA futtatás ebből a könyvtárból R-ban a következő parancs segítségével: `shiny::runApp()`.\n\nA már telepített verzió itt érhető el: <https://psolymos.shinyapps.io/dcapps/>.\n\nShinylive webr segítségével (<https://posit-dev.github.io/r-shinylive/>):\n\n```R\nshinylive::export(\"app\", \"docs\")\nhttpuv::runStaticServer(\"docs/\", port=8080)\n```","type":"text"},{"name":"global.R","content":"library(\"shiny\")\nlibrary(\"shinydashboard\")\n","type":"text"}]
